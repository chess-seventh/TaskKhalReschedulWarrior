#!/usr/bin/env python3
"""
TaskWarrior Hook to add scheduled or due event to khal by checking if the
UUID exists.
This works for Khal Events added by Khal that have the same UUID (ics file).
"""
import json
import subprocess
import sys
from datetime import datetime as dt
from datetime import timedelta

from pathlib import Path
from pytz import timezone

from ics import Event
from ics import Calendar
from taskw import TaskWarrior as TaskW


def main(new_task):
    """
    Function that runs everything.

    :new_task: STDIN value.
    :returns: JSON formatted task.
    """
    task_war = TaskW()
    tw_config = task_war.load_config()
    projects_list = tw_config["trsw_projects"].split(",")
    task_project = new_task["project"].split(".")[0]

    if "bm" in new_task["project"]:
        khal_calendar = "work"
    elif task_project in projects_list:
        khal_calendar = new_task["project"].split(".")[0]
    else:
        khal_calendar = "calendar"

    check_existing_event(new_task["uuid"], khal_calendar)

    if 'scheduled' in new_task:
        new_task["scheduled"] = task_to_schedule(new_task,
                                                 khal_calendar,
                                                 'scheduled')

    if 'due' in new_task:
        new_task["due"] = task_to_schedule(new_task,
                                           khal_calendar,
                                           'due')

    new_task["tags"].append("khal")

    sys.stdout.write(json.dumps(new_task, separators=(",", ":")))
    sys.exit(0)


def task_to_schedule(new_task, khal_calendar, scheduling_type):
    """
    Function to handle scheduled or due tasks

    :new_task: task to add to khal.
    :khal_calendar: khal calendar to add the event with a scheduled date.
    :scheduling_type: can be one fo these: scheduled or due.

    :return: None
    """
    calendar = Calendar()
    event = Event()
    event.name = new_task["description"]
    event.uid = new_task["uuid"]

    start = check_event_time(new_task[scheduling_type])
    new_task[scheduling_type] = start
    event.begin = start

    # TODO: get pommodoro time or not
    day_end = format_date(start) + timedelta(hours=1)
    event.end = day_end.strftime("%Y%m%dT%H%M%SZ")

    calendar.events.add(event)

    ics_name = new_task['uuid'] + ".ics"
    with open(ics_name, 'w') as cal_file:
        cal_file.writelines(calendar)

    execute(khal_calendar, ics_name)
    cleanup(ics_name)
    return start


def check_event_time(task_date):
    """
    """
    tw_date = format_date(task_date)
    time_diff = timezone('Europe/Zurich').utcoffset(tw_date, is_dst=False)
    localized_date = tw_date + time_diff

    if localized_date.hour == 0:
        # If it's midnight
        # TODO: get first start hours from config
        new_date = dt(localized_date.year,
                      localized_date.month,
                      localized_date.day,
                      8, 30, 0, 0) - time_diff

        return new_date.strftime("%Y%m%dT%H%M%SZ")

    elif localized_date.hour < 6 and localized_date.hour > 0:
        # if it's during sleepy time reschedule it at 18h
        # TODO: get sleepy hours from config
        new_date = dt(localized_date.year,
                      localized_date.month,
                      localized_date.day,
                      18, 30, 0, 0) - time_diff

        return new_date.strftime("%Y%m%dT%H%M%SZ")

    elif localized_date.hour > 20 and localized_date.hour < 23:
        # if it's after dinner
        # TODO: get after dinner hours from config
        new_date = dt(localized_date.year,
                      localized_date.month,
                      localized_date.day,
                      10, 30, 0, 0) - time_diff

        return new_date.strftime("%Y%m%dT%H%M%SZ")

    new_date = dt(localized_date.year,
                  localized_date.month,
                  localized_date.day,
                  localized_date.hour,
                  localized_date.minute,
                  localized_date.second,
                  0) - time_diff

    return new_date.strftime("%Y%m%dT%H%M%SZ")

def format_date(tw_date):
    """
    :tw_date: Taskwarrior date unformatted (str).
    :return: The datetime date formatted.
    """
    return dt.strptime(tw_date, "%Y%m%dT%H%M%SZ")


def execute(khal_calendar, ics_file):
    """Execute Khal import command in shell.

    :calendar_file: Calendar file to import in Khal.
    :returns: The exit result of the command.
    """
    command = ["khal", "import", "-a", khal_calendar]
    command.append(ics_file)
    command.append("--batch")  # no confirmations

    proc = subprocess.Popen(command, stdout=subprocess.PIPE)
    proc.communicate()


def cleanup(ics_name):
    """Function that cleans up what we created.
    :ics_name: The ics file to be removed.
    :returns: None
    """
    command = ["rm", "-f", ics_name]
    proc = subprocess.Popen(command, stdout=subprocess.PIPE)
    proc.communicate()


def check_existing_event(ics_uuid, khal_calendar):
    """Checks if the UUID of an event created by Task exists already. If the
    event exists already delete the existing entry.
    """
    khal_calendar_location = "~/.calendars/khal/" \
        + khal_calendar \
        + "/" \
        + ics_uuid \
        + ".ics"
    event_file = Path(khal_calendar_location)
    if event_file.is_file():
        command = ["rm", "-f", khal_calendar_location]
        proc = subprocess.Popen(command, stdout=subprocess.PIPE)
        proc.communicate()


if __name__ == "__main__":
    TW_TASK = json.loads(sys.stdin.readline())
    main(TW_TASK)
